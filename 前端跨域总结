#先总结跨域的几种情况：
URL	      										说明									是否允许通信

http://www.my.com/a.js 
http://www.my.com/b.js				同一域名下						允许

http://www.my.com/lab/a.js 
http://www.my.com/script/b.js	同一域名下不同文件夹	允许

http://www.my.com:8000/a.js 
http://www.my.com/b.js				同一域名，不同端口		不允许

http://www.my.com/a.js 
https://www.my.com/b.js				同一域名，不同协议		不允许

http://www.my.com/a.js 
http://10.192.160.1/b.js			域名和域名对应ip			不允许

http://www.my.com/a.js 
http://script.my.com/b.js			主域相同，子域不同		不允许

http://www.my.com/a.js 
http://my.com/b.js						同域，不同二级域名		不允许（cookie这种情况下也不允许访问）

http://www.cnblogs.com/a.js 
http://www.my.com/b.js				不同域名							不允许


#1. 基本三种JS跨域方式：iframe，基于script标签，后台代理；
##1.1 iframe实现跨域的几个页面必须基于同一基础域、同一协议和同一端口，then在各自页面设置document.domain为同一域名，即可实现父子页面的调用，如parent,top方法等；
##1.2 动态创建script标签可加载其它域下的js文件，JSONP也是基于此种模式实现，但需要后台代码返回CALLBACK函数及参数；（这里还能在url中加上Hash参数进行传参，如http://www.pangw.com/test.html#name=aaa）
##1.3 后台代理可以实现大多数跨域问题，后台作为代理，每次对其它域的请求转交本域后台，然后模拟http请求去访问其它域，再将结果返回给请求端；
		这样做的话，无论访问的是文档，还是js文件都能实现跨域；

#2. 其它方法：
##2.1 在HTML5中新增了window.postMessage方法，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 *；（此方法在项目中还没用过）
##2.2 web socket是新的浏览器API，它在一个单独的持久连接上提供全双工、双向通信；它的原理是：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接，取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议；

#3. tips：
##3.1 协议或者端口的跨域问题，暂时单纯在前端是没法解决的；
